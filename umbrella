#!/bin/bash
# Usage:
#   Single domain mode:
#     $(basename "$0") -d example.com [-o output.txt] [-R resume_offset] [-c config.yaml] [-t <token>] [-r rate_limit] [-u user_agent] [-w] [-v]
#
#     Example: $(basename "$0") -d example.com -R dashboard.example.com -t <token> -r 12 -u "CustomUserAgent/1.0" -w -v
#
#   Multiple domains mode:
#     $(basename "$0") -l domains.txt [-c config.yaml] [-t <token>] [-r rate_limit] [-u user_agent] [-w] [-v]
#     (Results are saved as <domain>.txt for each domain in the list)
#
# Options:
#   -d, --domain       Domain to query subdomains for (required in single domain mode)
#   -l, --list         File containing a list of domains (one per line) for multiple domain mode
#   -o, --output       Output file for a single domain (if omitted, results print to STDOUT)
#   -R, --resume       Resume from a given offset subdomain (must be a subdomain of the provided domain)
#   -c, --config       Alternative configuration file path (config.yaml)
#   -t, --token        Direct API token (UUID format) to use instead of a config file or env variable
#   -r, --rate-limit   Fixed delay (in seconds) after each API call (default: 3 seconds)
#   -u, --user-agent   Custom User-Agent string to use instead of the default
#   -w, --web          Enable web mode: include the Origin header "Origin: https://dashboard.umbrella.com"
#   -v, --verbose      Enable verbose mode: print HTTP request, response, and jq output
#   -h, --help         Show this help message

# Parse command-line options using GNU getopt
OPTIONS=$(getopt -o d:o:c:t:l:R:r:u:wvh -l domain:,output:,config:,token:,list:,resume:,rate-limit:,user-agent:,web,verbose,help -- "$@")
if [ $? -ne 0 ]; then
    echo "Error: Incorrect options provided." >&2
    exit 1
fi
eval set -- "$OPTIONS"

# Initialize variables
DOMAIN=""
OUTPUT_FILE=""
CONFIG_FILE=""
TOKEN=""
LIST_FILE=""
RESUME=""
VERBOSE=0
RATE_LIMIT=3
USER_AGENT=""    # Will be set to default if not provided
WEB_FLAG=0

# Set default User-Agent
DEFAULT_USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:135.0) Gecko/20100101 Firefox/135.0"

# Process options
while true; do
    case "$1" in
        -d|--domain)
            DOMAIN="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        -c|--config)
            CONFIG_FILE="$2"
            shift 2
            ;;
        -t|--token)
            TOKEN="$2"
            shift 2
            ;;
        -l|--list)
            LIST_FILE="$2"
            shift 2
            ;;
        -R|--resume)
            RESUME="$2"
            shift 2
            ;;
        -r|--rate-limit)
            RATE_LIMIT="$2"
            shift 2
            ;;
        -u|--user-agent)
            USER_AGENT="$2"
            shift 2
            ;;
        -w|--web)
            WEB_FLAG=1
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -h|--help|-hh)
            echo "Usage:"
            echo "  Single domain mode:"
            echo "    $(basename "$0") -d example.com [-o output.txt] [-R resume_offset] [-c config.yaml] [-t <token>] [-r rate_limit] [-u user_agent] [-w] [-v]"
            echo "    Example: $(basename "$0") -d example.com -R dashboard.example.com -t <token> -r 12 -u \"CustomUserAgent/1.0\" -w -v"
            echo ""
            echo "  Multiple domains mode:"
            echo "    $(basename "$0") -l domains.txt [-c config.yaml] [-t <token>] [-r rate_limit] [-u user_agent] [-w] [-v]"
            echo "    (Results are saved as <domain>.txt for each domain in the list)"
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

# Validate that either a single domain or a list is provided (not both)
if [ -n "$DOMAIN" ] && [ -n "$LIST_FILE" ]; then
    echo "Error: Specify either a single domain (-d) or a list file (-l), not both." >&2
    exit 1
fi
if [ -z "$DOMAIN" ] && [ -z "$LIST_FILE" ]; then
    echo "Error: You must specify either a single domain (-d) or a list file (-l)." >&2
    exit 1
fi

# In list mode, resume option is not allowed.
if [ -n "$LIST_FILE" ] && [ -n "$RESUME" ]; then
    echo "Error: The resume option (-R) works only in single domain mode." >&2
    exit 1
fi

# If resume is provided in single domain mode, validate that it is a subdomain of DOMAIN.
if [ -n "$DOMAIN" ] && [ -n "$RESUME" ]; then
    if [[ "$RESUME" != *."$DOMAIN" ]]; then
        echo "Error: The resume value must be a subdomain of the domain provided." >&2
        exit 1
    fi
fi

# Set the user agent: if a custom one is provided, use it; otherwise, use the default.
if [ -z "$USER_AGENT" ]; then
    USER_AGENT="$DEFAULT_USER_AGENT"
fi

# Resolve the API token: priority is -t flag, then UMBRELLA_TOKEN env variable, then config file.
if [ -z "$TOKEN" ]; then
    if [ -n "$UMBRELLA_TOKEN" ]; then
        TOKEN="$UMBRELLA_TOKEN"
    else
        # Determine configuration file location
        if [ -n "$CONFIG_FILE" ]; then
            if [ ! -f "$CONFIG_FILE" ]; then
                echo "Error: Config file not found at $CONFIG_FILE" >&2
                exit 1
            fi
        else
            if [ -f "./config.yaml" ]; then
                CONFIG_FILE="./config.yaml"
            elif [ -f "${HOME}/.config/umbrella/config.yaml" ]; then
                CONFIG_FILE="${HOME}/.config/umbrella/config.yaml"
            else
                echo "Error: Config file not found. Provide one via -c, or set UMBRELLA_TOKEN, or supply token via -t." >&2
                exit 1
            fi
        fi

        # Ensure yq is installed
        if ! command -v yq &> /dev/null; then
            echo "Error: yq is required but not installed." >&2
            exit 1
        fi

        # Attempt to extract the token using yq (supporting both v4 and v3 syntax)
        TOKEN=$(yq e '.token[0]' "$CONFIG_FILE" 2>/dev/null)
        if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            TOKEN=$(yq e '.token' "$CONFIG_FILE" 2>/dev/null)
        fi
        if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            TOKEN=$(yq r "$CONFIG_FILE" "token[0]" 2>/dev/null)
            if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
                TOKEN=$(yq r "$CONFIG_FILE" "token" 2>/dev/null)
            fi
        fi
        if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Error: API token not found in config file." >&2
            exit 1
        fi
    fi
fi

# API query settings
LIMIT=100

# Set output method: for single domain mode, if -o is provided use that, else STDOUT.
# In list mode, each domainâ€™s result is saved to a file named <domain>.txt.
if [ -n "$OUTPUT_FILE" ]; then
    > "$OUTPUT_FILE"
    output_method="file"
else
    output_method="stdout"
fi

# Function to query subdomains for a given domain.
query_domain() {
    local d="$1"
    local out_file="$2"
    local OFFSET=""
    local LIMIT=100

    # In single domain mode, if resume is provided, use it as the initial offset.
    if [ -n "$RESUME" ]; then
        OFFSET="$RESUME"
    fi

    # If output file is specified, clear it.
    if [ -n "$out_file" ]; then
        > "$out_file"
    fi

    while true; do
        if [ -z "$OFFSET" ]; then
            URL="https://investigate.api.umbrella.com/subdomains/${d}?limit=${LIMIT}"
        else
            URL="https://investigate.api.umbrella.com/subdomains/${d}?limit=${LIMIT}&offsetName=${OFFSET}"
        fi

        # Build the curl command headers
        # Always include Accept, Authorization, and User-Agent headers.
        # Include Origin header only if WEB_FLAG is set.
        CURL_CMD=(curl -s -L --request GET --url "$URL" \
            --header "Accept: application/json" \
            --header "User-Agent: ${USER_AGENT}" \
            --header "Authorization: Bearer ${TOKEN}")
        if [ "$WEB_FLAG" -eq 1 ]; then
            CURL_CMD+=(--header "Origin: https://dashboard.umbrella.com")
        fi

        if [ "$VERBOSE" -eq 1 ]; then
            echo "HTTP request: ${CURL_CMD[*]}" >&2
        fi

        RESPONSE=$("${CURL_CMD[@]}")

        if [ "$VERBOSE" -eq 1 ]; then
            echo "HTTP response: $RESPONSE" >&2
        fi

        NAMES=$(echo "$RESPONSE" | jq -r '.[].name')
        if [ "$VERBOSE" -eq 1 ]; then
            echo "jq: $NAMES" >&2
        fi

        COUNT=$(echo "$NAMES" | wc -l)

        if [ "$output_method" = "file" ]; then
            echo "$NAMES" >> "$out_file"
        else
            echo "$NAMES"
        fi

        # If the batch has fewer than LIMIT, we're done.
        if [ "$COUNT" -lt "$LIMIT" ]; then
            break
        fi

        OFFSET=$(echo "$NAMES" | tail -n 1)
        sleep "$RATE_LIMIT"
    done
}

# Main logic:
if [ -n "$LIST_FILE" ]; then
    if [ ! -f "$LIST_FILE" ]; then
        echo "Error: List file not found at $LIST_FILE" >&2
        exit 1
    fi
    while IFS= read -r line || [ -n "$line" ]; do
        domain_entry=$(echo "$line" | xargs)  # trim whitespace
        # Skip empty lines or lines starting with "#"
        if [ -z "$domain_entry" ] || [[ "$domain_entry" == \#* ]]; then
            continue
        fi
        output_file="${domain_entry}.txt"
        query_domain "$domain_entry" "$output_file"
    done < "$LIST_FILE"
else
    query_domain "$DOMAIN" "$OUTPUT_FILE"
fi
